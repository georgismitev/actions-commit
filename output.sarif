{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "DeepCode",
          "rules": [
            {
              "id": "javascript%2Fdc%2FUseStrictEquality",
              "name": "UseStrictEquality",
              "shortDescription": {
                "text": "Use === instead of == to compare to the value."
              },
              "fullDescription": {
                "text": "Use === instead of == to compare to the value."
              },
              "defaultConfiguration": {
                "level": "note"
              },
              "properties": {
                "tags": [
                  "API",
                  "JavaScript",
                  "Info"
                ],
                "precision": "very-high"
              }
            },
            {
              "id": "javascript%2Fdc%2FWrongOperatorPriorityNegationInstanceOf",
              "name": "WrongOperatorPriorityNegationInstanceOf",
              "shortDescription": {
                "text": "Negation applied before instanceof."
              },
              "fullDescription": {
                "text": "Negation applied before instanceof. Check operator priorities - negation has higher priority than instanceof."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "Defect",
                  "JavaScript"
                ],
                "precision": "very-high"
              }
            },
            {
              "id": "python%2Fdc%2FSqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "Unsanitized user input leads to SQL injection vulnerability."
              },
              "fullDescription": {
                "text": "Unsanitized input flows from the database and is used in an SQL query in execute. This may result in an SQL Injection vulnerability."
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "properties": {
                "tags": [
                  "Security",
                  "Python"
                ],
                "precision": "very-high"
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "javascript%2Fdc%2FUseStrictEquality",
          "level": "note",
          "message": {
            "text": "Use === instead of == to compare to the value."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "warning.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 51,
                  "endLine": 51,
                  "startColumn": 7,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "javascript%2Fdc%2FWrongOperatorPriorityNegationInstanceOf",
          "level": "error",
          "message": {
            "text": "Negation applied before instanceof. Check operator priorities - negation has higher priority than instanceof."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "critical.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 164,
                  "endLine": 164,
                  "startColumn": 8,
                  "endColumn": 32
                }
              }
            }
          ]
        },
        {
          "ruleId": "python%2Fdc%2FSqli",
          "level": "error",
          "message": {
            "text": "Unsanitized input flows from the database and is used in an SQL query in execute. This may result in an SQL Injection vulnerability."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "postgresql-critical.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 234,
                  "endLine": 234,
                  "startColumn": 5,
                  "endColumn": 18
                }
              }
            }
          ]
        }
      ]
    }
  ]
}
